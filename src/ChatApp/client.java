/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ChatApp;

import static ChatApp.server.dis;
import static ChatApp.server.dos;
import static ChatApp.server.ss;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.net.*;
import java.io.*;
import javax.swing.*;
import java.awt.*;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;
import javax.swing.border.Border;
/**
 *
 * @author bhupendraprajapati
 */
public class client extends javax.swing.JFrame {

    static Socket s;
    static DataInputStream dis;
    static DataOutputStream dos;
    static String ip;
    static String f;
    static FileInputStream fis;
    static FileOutputSream fos;
    
    static String ff="";
    /**
     * Creates new form client
     */
    public client() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        Name = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        msg_area = new javax.swing.JTextArea();
        msg_text = new javax.swing.JTextField();
        send_btn = new javax.swing.JButton();
        ipaddress = new javax.swing.JTextField();
        connect = new javax.swing.JButton();
        caddbtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Name.setBackground(new java.awt.Color(4, 11, 232));
        Name.setFont(new java.awt.Font("Ubuntu", 1, 36)); // NOI18N
        Name.setForeground(new java.awt.Color(12, 15, 28));
        Name.setText("User1");

        msg_area.setEditable(false);
        msg_area.setColumns(20);
        msg_area.setFont(new java.awt.Font("Ubuntu", 3, 14)); // NOI18N
        msg_area.setForeground(new java.awt.Color(3, 0, 255));
        msg_area.setRows(5);
        jScrollPane2.setViewportView(msg_area);

        msg_text.setBackground(new java.awt.Color(7, 7, 7));
        msg_text.setFont(new java.awt.Font("Ubuntu", 3, 18)); // NOI18N
        msg_text.setForeground(new java.awt.Color(231, 243, 245));

        send_btn.setFont(new java.awt.Font("Ubuntu", 1, 14)); // NOI18N
        send_btn.setText("Send");
        send_btn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        send_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                send_btnActionPerformed(evt);
            }
        });

        ipaddress.setBackground(new java.awt.Color(7, 4, 4));
        ipaddress.setForeground(new java.awt.Color(250, 238, 238));
        ipaddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ipaddressActionPerformed(evt);
            }
        });

        connect.setFont(new java.awt.Font("Ubuntu", 2, 18)); // NOI18N
        connect.setText("Connect");
        connect.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectActionPerformed(evt);
            }
        });

        caddbtn.setText("Add");
        caddbtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        caddbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                caddbtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 672, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ipaddress, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(73, 73, 73)
                        .addComponent(connect, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(58, 58, 58)
                        .addComponent(Name, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(msg_text, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addComponent(caddbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(84, 84, 84)
                        .addComponent(send_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(57, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(connect)
                            .addComponent(ipaddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(Name, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(msg_text, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(caddbtn)
                    .addComponent(send_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void send_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_send_btnActionPerformed
        // TODO add your handling code here:
         

        try {
            String msg;
            
            msg = "";
            // ff null meaning no file is selected and i have to send a text msg
            if(!ff.equals(""))
            {    byte b[]=new byte[1024];
                String sss;
                fis = new FileInputStream(new File(ff));                
                b[0]=-1;
                // b[0] =-1 is the indication to receiver that You are going to receive a file
                int m;
               String[] arrOfStr = ff.split("/", 100);
               String fname = arrOfStr[arrOfStr.length - 1];
               // extracting file name from its path
                for(m=0;m<fname.length();m++){
			b[m+1]=(byte)(fname.charAt(m));		
		}
		b[++m]=(byte)(' ');
		b[m++]=(byte)(' ');
		dos.write(b, 0, 1024);
                // Writing file name in stream with its flag
                int count = fis.read(b, 0, 1024);
                // reading file and writing what is read into stream
                ff="";
                while (count != -1) {
                 dos.write(b, 0, 1024);                    
                  count = fis.read(b, 0, 1024);
                 }
                
               
               msg_area.setText(msg_area.getText() + "\n                                                                                                                 Me:  " + fname+" \n                                                                                                                                   succesfully transferred");
               msg_text.setText(msg_text.getText() + ff);
                //System.out.println("Success");
                
                msg_text.setText(msg_text.getText() + ff);
            }  
            else{
                byte b[]=new byte[1024];
                b[0]=0;
                 msg_text.setText(msg_text.getText());
                dos.write(b, 0, 1024);
                msg = msg_text.getText();
                  dos.writeUTF(msg);
                  
                 msg_area.setText(msg_area.getText() + "\n                                                                                                                                       Me:  " + msg+ff);
            }
           
            msg_text.setText("");
           

        } catch (IOException e) {
            //exceptions
        }
    }//GEN-LAST:event_send_btnActionPerformed

    private void ipaddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ipaddressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ipaddressActionPerformed

    private void connectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectActionPerformed
        
        
        ip = ipaddress.getText();
        ipaddress.setText("Successfully connected"); 
        
    }//GEN-LAST:event_connectActionPerformed

    private void caddbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_caddbtnActionPerformed
        // TODO add your handling code here:
        
        try{
        JFileChooser chooser = new JFileChooser();
        int vl=chooser.showOpenDialog(this);
        if(vl == JFileChooser.APPROVE_OPTION){
            
            try{
                 File fs = chooser.getSelectedFile();
                 // Choosing a file from file system
                   ff = fs.getAbsolutePath();
                   msg_area.setText( msg_area.getText()+"\n                                                 Me:"+ff+" \n                                                                 succesfully chosen");
            }
            catch(Exception e){
                
            }
        }
       
        }
        catch(HeadlessException e){
        //
}

        
    }//GEN-LAST:event_caddbtnActionPerformed

    /**
     * @param args the command line arguments
     * @throws java.io.IOException
     */
    public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        ff= "";
        java.awt.EventQueue.invokeLater(() -> {
            new client().setVisible(true);
        });
           
        try {

            s = new Socket(ip, 8906);
           //msg_area.setText(" Successfully connected");
            dis = new DataInputStream(s.getInputStream());
            dos = new DataOutputStream(s.getOutputStream());
            
//            msg_text.setText(" ");
//            msg_area.setText(" ");
            while(true){
            String msgin="";
            byte bb[]=new byte[1024];
            int p=dis.read(bb,0,1024);
             msg_area.setText(msg_area.getText());
            if(p<1)
                continue;
            // p<1 means no data is read
            if(bb[0]==-1){
                String fname="";
                
		int z=1;
		while((char)bb[z] !=' '){
			fname+=(char)bb[z];
			z++;		
		}
		z++;
                // fanme has file name that another user has send
		msg_area.setText(msg_area.getText() + "\nUser: "+fname+" Received and saved to \n /home/bhupendraprajapati/Desktop/bhupendra/");
		
		File f= new File("/home/bhupendraprajapati/Desktop/bhupendra/"+fname);
		
		byte bbb[]=new byte[1024];
		int count = dis.read(bbb,0,1024);
		//System.out.println("Data Receiving...");
		FileOutputStream fos = new FileOutputStream(f);
                // reading file data from stream and writing into file
		while(count!=-1){
			fos.write(bbb,0,count);
			count = dis.read(bbb,0,1024);
                        //msg_text_s.setText(msg_text_s.getText()+" "+count);
		}
		
                
            }
            else{
           // Reading text msg and showing it in msg area
                msgin = dis.readUTF();
                msg_area.setText(msg_area.getText() + "\nUser: " + msgin);
              
            }
            }
            
          

        }

        catch (IOException e) {

        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Name;
    private static javax.swing.JButton caddbtn;
    private javax.swing.JButton connect;
    public static javax.swing.JTextField ipaddress;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JScrollPane jScrollPane2;
    private static javax.swing.JTextArea msg_area;
    private static javax.swing.JTextField msg_text;
    private static javax.swing.JButton send_btn;
    // End of variables declaration//GEN-END:variables

    private Object msg_area() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
